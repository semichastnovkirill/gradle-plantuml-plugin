buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "java"
    id "java-gradle-plugin"
    id "groovy"
    id "idea"
    id "signing"
    id "com.github.hierynomus.license" version "0.14.0"
    id "nebula.release" version "6.0.2"
    id "nebula.maven-base-publish" version "5.1.0"
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dependencies

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy:2.4.2'
    compile 'commons-io:commons-io:2.4'
    compile 'net.sourceforge.plantuml:plantuml:8059'

    testCompile 'junit:junit:4.12'
}

uploadArchives {
    enabled = true
}

gradlePlugin {
    plugins {
        javaPrototypeHelper {
            id = 'PlantUml'
            implementationClass = 'org.communis.semichastnovkirill.gradle.PlantUmlPlugin'
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Settings
ext {
    // Project constants
    github_org = 'semichastnovkirill'
    project_group = artifactGroup
    project_name = artifactName
    project_version = '0.0.1-SNAPSHOT'
    project_description = 'Renders PlantUML to image files'
    project_jdk = '1.8'
    isReleaseVersion = !project_version.endsWith("SNAPSHOT")

    /*
     * Fine tune the POM contents here, particularly, the developers section. Some defaulting behavior is provided
     * for all other fields based on project constants.
     */
    project_pom = {
        name project_name
        description project_description
        url "https://github.com/${github_org}/${project_name}"
        licenses {
            license {
                name 'MIT License'
                url 'http://opensource.org/licenses/MIT'
                distribution 'repo'
            }
        }
        scm {
            url "https://github.com/${github_org}/${project_name}.git"
            connection "scm:git:https://github.com/${github_org}/${project_name}.git"
            developerConnection "scm:git:git@github.com:${github_org}/${project_name}.git"
        }
        organization {
            name github_org
            url "https://github.com/${github_org}"
        }
        developers {
            developer {
                id 'semichastnovkirill'
                name 'Kirill Semichastnov'
            }
        }
    }

}

group = artifactGroup
sourceCompatibility = project_jdk
targetCompatibility = project_jdk
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// License

license {
    header rootProject.file('LICENSE')
}

assemble {
    dependsOn licenseFormatMain, licenseFormatTest
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Artifacts

task javadocJar (type: Jar) {
    dependsOn tasks.javadoc
    from tasks.javadoc.destinationDir
    classifier 'javadoc'
    extension 'jar'
    group 'build'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

task sourceJar (type: Jar) {
    dependsOn tasks.classes
    from sourceSets.main.allSource
    classifier 'sources'
    extension 'jar'
    group 'build'
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Publishing

assemble {
    dependsOn licenseFormatMain, licenseFormatTest
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

tasks.release.finalizedBy tasks.publish

publishing {
    publications{
        nebula(MavenPublication){
            from components.java
            groupId artifactGroup
            artifactId artifactName
            version project.version
            pom.withXml {
                configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
                    asNode().dependencies[0].dependency.find {
                        it.artifactId[0].text() == dep.moduleName &&
                                it.groupId[0].text() == dep.moduleGroup
                    }?.scope[0]?.value = 'compile'
                }
            }
        }

        nebula(MavenPublication) {
            artifact tasks.sourceJar
        }

        nebula(MavenPublication) {
            artifact tasks.javadocJar
        }
    }

    repositories {
        maven {
            if(project.version.toString().endsWith('-SNAPSHOT')
                    || project.version.toString().contains('-dev')) {
                url "${deployUrl}${repoSnapshots}"
                credentials {
                    username "${deployUser}"
                    password "${deployPass}"
                }
            }
            else {
                url "${deployUrl}${repoReleases}"
                credentials{
                    username "${deployUser}"
                    password "${deployPass}"
                }
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Misc

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

idea {
    module {
        downloadSources = true
    }
    project {
        jdkName = project_jdk
        languageLevel = project_jdk
        vcs = 'Git'
    }
}
