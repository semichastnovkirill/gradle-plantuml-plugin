buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "java"
    id "groovy"
    id "idea"
    id "signing"
    id "com.github.hierynomus.license" version "0.14.0"
    id "nebula.release" version "6.0.2"
    id "nebula.maven-base-publish" version "5.1.0"
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dependencies

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile 'org.codehaus.groovy:groovy:2.4.2'
    compile 'commons-io:commons-io:2.4'
    compile 'net.sourceforge.plantuml:plantuml:8059'
}

uploadArchives {
    enabled = true
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Settings
ext {
    // Project constants
    github_org = 'semichastnovkirill'
    project_group = artifactGroup
    project_name = artifactName
    project_version = '0.0.1-SNAPSHOT'
    project_description = 'Renders PlantUML to image files'
    project_jdk = '1.8'
    isReleaseVersion = !project_version.endsWith("SNAPSHOT")

    /*
     * Fine tune the POM contents here, particularly, the developers section. Some defaulting behavior is provided
     * for all other fields based on project constants.
     */
    project_pom = {
        name project_name
        description project_description
        url "https://github.com/${github_org}/${project_name}"
        licenses {
            license {
                name 'MIT License'
                url 'http://opensource.org/licenses/MIT'
                distribution 'repo'
            }
        }
        scm {
            url "https://github.com/${github_org}/${project_name}.git"
            connection "scm:git:https://github.com/${github_org}/${project_name}.git"
            developerConnection "scm:git:git@github.com:${github_org}/${project_name}.git"
        }
        organization {
            name github_org
            url "https://github.com/${github_org}"
        }
        developers {
            developer {
                id 'semichastnovkirill'
                name 'Kirill Semichastnov'
            }
        }
    }

    /** Function returns a new manifest that can be customized per module */
    defaultManifest = {
        return manifest {
            def git_cmd = "git rev-parse HEAD"
            def git_proc = git_cmd.execute()
            attributes 'SCM-Revision': git_proc.text.trim()
            attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
            attributes 'Build-Host': InetAddress.localHost.hostName
        }
    }

    /** Used where gradle task evaluation would fail because of an undefined value, even if the task wasn't targeted. */
    defaultBlank = { closure ->
        try {
            closure()
        } catch (MissingPropertyException e) {
            ''
        }
    }
}

group = artifactGroup
sourceCompatibility = project_jdk
targetCompatibility = project_jdk
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// License

license {
    header rootProject.file('LICENSE')
}

assemble {
    dependsOn licenseFormatMain, licenseFormatTest
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Artifacts

jar {
    doFirst {
        // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
        manifest = defaultManifest()
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
    doFirst {
        // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
        manifest = defaultManifest()
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    doFirst {
        // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
        manifest = defaultManifest()
    }
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Publishing

assemble {
    dependsOn licenseFormatMain, licenseFormatTest
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Misc

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

idea {
    module {
        downloadSources = true
    }
    project {
        jdkName = project_jdk
        languageLevel = project_jdk
        vcs = 'Git'
    }
}

